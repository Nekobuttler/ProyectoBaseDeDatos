--PARTE 1 DE 2: Creación de Paquetes de Procedimientos almacenados--



CREATE OR REPLACE PACKAGE CRUD_SCHOOL_MANAGMENT
IS
--CREATES

PROCEDURE NUEVO_PROFESOR(P_CEDULA_PROFESOR NUMBER,P_NOMBRE VARCHAR2,P_APELLIDOS VARCHAR2,P_FECHA_NACIMIENTO DATE,P_TELEFONO NUMBER,P_CORREO VARCHAR2,P_ID_MATERIA NUMBER);
PROCEDURE NUEVO_ESTUDIANTE(P_CEDULAESTUDIANTE  VARCHAR2, P_NOMBREESTUDIANTE  VARCHAR2, P_APELLIDOSESTUDIANTE  VARCHAR2, 
P_FECHANACIMIENTO  DATE, P_TELEFONO  NUMBER , P_IDSEXO  NUMBER, P_FECHAREGISTRO  DATE , P_IDGRUPO  NUMBER);
PROCEDURE NUEVA_MATERIA(P_NOMBRE_MATERIA VARCHAR2);
PROCEDURE NUEVO_CONTACTO(P_CEDULA_ENCARGADO  NUMBER , P_ID_ESTUDIANTE  NUMBER);
PROCEDURE NUEVA_RELACION(P_TIPORELACION VARCHAR2, P_CEDULA_ENCARGADO NUMBER ,P_ID_ESTUDIANTE NUMBER);
PROCEDURE NUEVO_ENCARGADO(P_CEDULAENCARGADO,P_NOMBREENCARGADO,P_CORREOENCARGADO,P_NUMTELEFONO,P_RELACION);
PROCEDURE NUEVO_CORREO_EST(P_CorreoEstudiante varchar2, P_idEstudiante NUMBER );
PROCEDURE NUEVO_ESTADO(P_NOMBREESTADO VARCHAR2);
PROCEDURE NUEVA_GRUPO(P_IDGRUPO  VARCHAR2 ,P_CEDULAPROFESOR  NUMBER , P_NIVEL  VARCHAR2);

--SELECTS 

PROCEDURE RECUPERAR_ESTUDIANTES;
PROCEDURE RECUPERAR_ESTUDIANTES(P_IDESTUDIANTE VARCHAR2);
PROCEDURE RECUPERAR_ESTUDIANTES(P_CEDULAESTUDIANTE  NUMBER);
PROCEDURE RECUPERAR_MATERIA (P_IDMATERIA  NUMBER);
PROCEDURE RECUPERAR_MATERIA (P_IDMATERIA  NUMBER);

--DELETES 


--UPDATES 

END;


CREATE OR REPLACE PACKAGE BODY CRUD_SCHOOL_MANAGMENT
IS


PROCEDURE  NUEVO_CORREO_EST(P_CorreoEstudiante varchar2, P_idEstudiante NUMBER)
AS 
CHECK NUMBER; 
BEGIN 
	SELECT COUNT(*) INTO CHECK FROM TB_ESTUDIANTES WHERE P_IDESTUDIANTE = ID_ESTUDIANTE;
	IF CHECK > 0 THEN 
		INSERT INTO TBcorreoEstudiante(CORREO_ESTUDIANTE , ID_ESTUDIANTE)
		 VALUES(
		P_CorreoEstudiante .
		 P_idEstudiante
				);
        ELSE
            RAISE_APPLICATION_ERROR(-2000, 'EL ESTUDIANTE SOLICITADO NO EXISTE');
        END IF;
        END;


PROCEDURE  NUEVO_PROFESOR(P_CEDULA_PROFESOR IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_APELLIDOS IN VARCHAR2,
P_FECHA_NACIMIENTO IN DATE,
P_TELEFONO IN  NUMBER,
P_CORREO IN VARCHAR2,
P_ID_MATERIA IN NUMBER)
AS 
CHECK NUMBER; 
BEGIN 
	SELECT COUNT(*) INTO CHECK FROM TB_MATERIA WHERE P_ID_MATERIA = ID_MATERIA;
	IF CHECK > 0 THEN 
		INSERT INTO TBPROFESOR(CEDULAPROFESOR,NOMBRE,APELLIDOS,FECHANACIMIENTO,TELEFONO,CORREO,ID_MATERIA)
		 VALUES(
		P_CEDULA_PROFESOR 
        ,P_NOMBRE 
        ,P_APELLIDOS 
        ,P_FECHA_NACIMIENTO 
        ,P_TELEFONO 
        ,P_CORREO 
        ,P_ID_MATERIA 
				);
        ELSE
            RAISE_APPLICATION_ERROR(-2000, 'EL ESTUDIANTE SOLICITADO NO EXISTE');
        END IF;
        END;
        
PROCEDURE  NUEVO_CONTACTO(P_CEDULA_ENCARGADO IN NUMBER , P_ID_ESTUDIANTE IN NUMBER)
AS 
CHECK NUMBER; 
BEGIN 
	SELECT COUNT(*) INTO CHECK FROM TB_ENCARGADO WHERE P_CEDULA_ENCARGADO = CEDULAENCARGADO;
	IF CHECK > 0 THEN 
        SELECT COUNT(*) INTO CHECK FROM TB_ESTUDIANTE WHERE P_ID_ESTUDIANTE = ID_ESTUDIANTE;
        IF CHECK > 0 THEN 
		INSERT INTO TBCONTACTO(CEDULAENCARGADO,IDESTUDIANTE)
		 VALUES(
		P_CEDULA_ENCARGADO , P_ID_ESTUDIANTE 
				);
        ELSE
            RAISE_APPLICATION_ERROR(-2000, 'EL ESTUDIANTE SOLICITADO NO EXISTE');
        END IF;
         ELSE
            RAISE_APPLICATION_ERROR(-2000, 'EL ENCARGADO SOLICITADO NO EXISTE');
            END IF;
        END;
        

 PROCEDURE NUEVO_ESTUDIANTE(P_CEDULAESTUDIANTE IN VARCHAR2, P_NOMBREESTUDIANTE IN VARCHAR2, P_APELLIDOSESTUDIANTE IN VARCHAR2, 
P_FECHANACIMIENTO IN DATE, P_TELEFONO IN NUMBER , P_IDSEXO IN NUMBER, P_FECHAREGISTRO IN DATE , P_IDGRUPO IN NUMBER)
AS 
CHECK NUMBER; 
BEGIN 
	SELECT COUNT(*) INTO CHECK FROM TB_SEXO WHERE IDSEXO = P_IDSEXO;
    IF CHECK > 0 THEN 
    SELECT COUNT(*) INTO CHECK FROM TB_GRUPO WHERE ID_GRUPO = P_IDGRUPO;
    IF CHECK > 0 THEN 
    INSERT INTO TB_ESTUDIANTE(CEDULAESTUDIANTE,NOMBREESTUDIANTE,APELLIDOESTUDIANTE,FECHANACIMIENTO,TELEFONO , IDSEXO,IDGRUPO)
    VALUES 
    (P_CEDULAESTUDIANTE, 
    P_NOMBREESTUDIANTE , 
    P_APELLIDOSESTUDIANTE , 
    P_FECHANACIMIENTO, 
    P_TELEFONO  , 
    P_IDSEXO , 
    P_FECHAREGISTRO  
    , P_IDGRUPO );
     ELSE
            RAISE_APPLICATION_ERROR(-2000, 'EL GRUPO SOLICITADO NO EXISTE');
        END IF;
         ELSE
            RAISE_APPLICATION_ERROR(-2000, 'EL SEXO SOLICITADO NO EXISTE');
            END IF;
END;


 PROCEDURE NUEVA_MATERIA(P_NOMBREMATERIA IN VARCHAR2)
AS
BEGIN 
INSERT INTO TBMATERIA(NOMBREMATERIA) VAlues (P_NOMBREMATERIA);
END;


PROCEDURE NUEVA_GRUPO(P_IDGRUPO IN VARCHAR2 ,P_CEDULAPROFESOR IN NUMBER , P_NIVEL IN VARCHAR2)
AS
BEGIN 
INSERT INTO TBGROUP(IDGRUPO, CEDULAPROFESORENCARGADO , NIVEL) VAlues
(P_IDGRUPO  ,P_CEDULAPROFESOR , P_NIVEL );
END;


PROCEDURE NUEVA_RELACION(P_TIPORELACION IN VARCHAR2,P_CEDULAENCARGADO IN NUMBER ,P_IDESTUDIANTE IN NUMBER)
AS 
CHECK NUMBER; 
BEGIN 
	SELECT COUNT(*) INTO CHECK FROM TB_ESTUDIANTE WHERE P_IDESTUDIANTE = IDESTUDIANTE;
    IF CHECK > 0 THEN 
    INSERT INTO TBRELACION(TIPORELACION,CEDULAENCARGADO,IDESTUDIANTE) VALUES (
    P_TIPORELACION,P_CEDULAENCARGADO,P_IDESTUDIANTE)
    
    END IF;
    END;

CREATE OR REPLACE PROCEDURE NUEVA_RELACION(P_TIPORELACION IN VARCHAR2,P_CEDULAENCARGADO IN NUMBER ,P_IDESTUDIANTE IN NUMBER)
AS 
CHECK NUMBER; 
BEGIN 
	SELECT COUNT(*) INTO CHECK FROM TB_ESTUDIANTE WHERE P_IDESTUDIANTE = IDESTUDIANTE;
    IF CHECK > 0 THEN 
    INSERT INTO TBRELACION(TIPORELACION,CEDULAENCARGADO,IDESTUDIANTE) VALUES (
    P_TIPORELACION,P_CEDULAENCARGADO,P_IDESTUDIANTE)
    
    END IF;
    END;

CREATE OR REPLACE PROCEDURE NUEVO_ESTADO(P_NOMBREESTADO IN VARCHAR2)
AS 
INSERT INTO TBESTADO(NOMBREESTADO) VALUES 
(P_NOMBREESTADO);
END;
------------------------------------------------------------------------------------

PROCEDURE RECUPERAR_ESTUDIANTE(P_IDCEDULAESTUDIANTE IN VARCHAR2)
AS
VAR_ESTUDIANTE TBESTUDIANTE%ROWTYPE;
BEGIN 
    SELECT CEDULAESTUDIANTE,NOMBREESTUDIANTE,APELLIDOSESTUDIANTE,FECHANACIMIENTO,TELEFONO,IDGRUPO
    INTO VAR_ESTUDIANTE.CEDULAESTUDIANTE,VAR_ESTUDIANTE.NOMBREESTUDIANTE,VAR_ESTUDIANTE.APELLIDOSESTUDIANTE,
    VAR_ESTUDIANTE.FECHANACIMIENTO,VAR_ESTUDIANTE.TELEFONO,VAR_ESTUDIANTE.IDGRUPO
    FROM TBESTUDIANTES 
    WHERE CEDULAESTUDIANTE = P_IDCEDULAESTUDIANTE; 
    DBMS_OUTPUT.PUT_LINE('LOS DATOS DEL ESTUDIANTE SON...CEDULA:' ||VAR_ESTUDIANTE.CEDULAESTUDIANTE||' NOMBRE '||VAR_ESTUDIANTE.NOMBREESTUDIANTE|| 'APELLIDOS '|| VAR_ESTUDIANTE.APELLIDOSESTUDIANTE
    'FECHA NACIMIENTO '|| VAR_ESTUDIANTE.FECHANACIMIENTO || 'TELEFONO: '|| VAR_ESTUDIANTE.TELEFONO||' GRUPO '|| VAR_ESTUDIANTE.IDGRUPO);   
END; 

 PROCEDURE RECUPERAR_ESTUDIANTE(P_IDESTUDIANTE IN NUMBER)
AS
CURSOR  DATA_ESTUDIANTES IS  SELECT * FROM TBESTUDIANTES WHERE IDESTUDIANTE = P_IDESTUDIANTE; 
BEGIN 
        FOR VAR_ESTUDIANTE in  DATA_ESTUDIANTES
       LOOP
   
           DBMS_OUTPUT.PUT_LINE('LOS DATOS DEL ESTUDIANTE SON...CEDULA:' ||VAR_ESTUDIANTE.CEDULAESTUDIANTE||' NOMBRE '||VAR_ESTUDIANTE.NOMBREESTUDIANTE|| 'APELLIDOS '|| VAR_ESTUDIANTE.REGION_NAME
           'FECHA NACIMIENTO '|| VAR_ESTUDIANTE.FECHANACIMIENTO || 'TELEFONO: '|| VAR_ESTUDIANTE.TELEFONO||' GRUPO '|| VAR_ESTUDIANTE.IDGRUPO);   
           END LOOP;
END; 

PROCEDURE RECUPERAR_ESTUDIANTE
AS
CURSOR  DATA_ESTUDIANTES IS SELECT * FROM TBESTUDIANTES; 
BEGIN 
        FOR VAR_ESTUDIANTE in  DATA_ESTUDIANTES
       LOOP
          
           DBMS_OUTPUT.PUT_LINE('LOS DATOS DEL ESTUDIANTE SON...CEDULA:' ||VAR_ESTUDIANTE.CEDULAESTUDIANTE||' NOMBRE '||VAR_ESTUDIANTE.NOMBREESTUDIANTE|| 'APELLIDOS '|| VAR_ESTUDIANTE.REGION_NAME
           'FECHA NACIMIENTO '|| VAR_ESTUDIANTE.FECHANACIMIENTO || 'TELEFONO: '|| VAR_ESTUDIANTE.TELEFONO||' GRUPO '|| VAR_ESTUDIANTE.IDGRUPO);   
          END LOOP;
END; 

PROCEDURE RECUPERAR_MATERIA(P_IDMATERIA IN VARCHAR2)
AS
CURSOR  DATA_MATERIA IS SELECT * FROM TBMATERIA WHERE IDMATERIA = P_IDMATERIA; 
BEGIN 
  FOR VAR_MATERIA in  DATA_MATERIA
       LOOP
    DBMS_OUTPUT.PUT_LINE('LA MATERIA : ' ||VAR_MATERIA.NOMBREMATERIA)
END; 

PROCEDURE RECUPERAR_MATERIA
AS
CURSOR  DATA_MATERIA IS SELECT * FROM TBMATERIA;
BEGIN 
  FOR VAR_MATERIA in  DATA_MATERIA
       LOOP
    DBMS_OUTPUT.PUT_LINE('LA MATERIA : ' ||VAR_MATERIA.NOMBREMATERIA)
END; 




PROCEDURE DELETE_ESTUDIANTE(P_IDESTUDIANTE IN NUMBER)
AS 
BEGIN 
    DELETE FROM TBESTUDIANTE WHERE ID_ESTUDIANTE=P_IDESTUDIANTE;
    END;

PROCEDURE DELETE_MATERIA(P_IDMATERIA IN NUMBER)
AS 
BEGIN 
    DELETE FROM TBMATERIA WHERE ID_MATERIA=P_IDMATERIA;
    END;



PROCEDURE UPDATE_ESTUDIANTE(P_IDESTUDIANTE IN NUMBER)
AS 
BEGIN 
    DELETE FROM TBESTUDIANTE WHERE ID_ESTUDIANTE=P_IDESTUDIANTE;
    END;



--PARTE 2 DE 2: Creación de Triggers--



CREATE TABLE AUDITORIAS_asistencia(
idAuditoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idAuditoria PRIMARY KEY(idAuditoria));

CREATE OR REPLACE TRIGGER TRG_TBasistencia
AFTER INSERT OR UPDATE OR DELETE ON TBasistencia
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_asistencia VALUES(NULL,'Asistencia','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_asistencia VALUES(NULL,'Asistencia','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_asistencia VALUES(NULL,'Asistencia','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_contacto(
idContacto NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idContacto PRIMARY KEY(idContacto));

CREATE OR REPLACE TRIGGER TRG_TBcontacto
AFTER INSERT OR UPDATE OR DELETE ON TBcontacto
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_contacto VALUES(NULL,'Contacto','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_contacto VALUES(NULL,'Contacto','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_contacto VALUES(NULL,'Contacto','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_correoEstudiante(
idCorreoEstudiante NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idCorreoEstudiante PRIMARY KEY(idCorreoEstudiante));

CREATE OR REPLACE TRIGGER TRG_TBCorreoEstudiante
AFTER INSERT OR UPDATE OR DELETE ON TBCorreoEstudiante
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_correoEstudiante VALUES(NULL,'Correos de Estudiantes','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_correoEstudiante VALUES(NULL,'Correos de Estudiantes','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_correoEstudiante VALUES(NULL,'Correos de Estudiantes','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_encargado(
idEncargado NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idEncargado PRIMARY KEY(idEncargado));

CREATE OR REPLACE TRIGGER TRG_TBencargado
AFTER INSERT OR UPDATE OR DELETE ON TBencargado
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_encargado VALUES(NULL,'Encargado','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_encargado VALUES(NULL,'Encargado','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_encargado VALUES(NULL,'Encargado','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_estado(
idEstado NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idEstado PRIMARY KEY(idEstado));

CREATE OR REPLACE TRIGGER TRG_TBestado
AFTER INSERT OR UPDATE OR DELETE ON TBestado
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_estado VALUES(NULL,'Estado','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_estado VALUES(NULL,'Estado','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_estado VALUES(NULL,'Estado','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_estudiante(
idEstudiante NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idEstudiante PRIMARY KEY(idEstudiante));

CREATE OR REPLACE TRIGGER TRG_TBestudiante
AFTER INSERT OR UPDATE OR DELETE ON TBestudiante
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_estudiante VALUES(NULL,'Estudiante','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_estudiante VALUES(NULL,'Estudiante','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_estudiante VALUES(NULL,'Estudiante','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_grupo(
idGrupo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idGrupo PRIMARY KEY(idGrupo));

CREATE OR REPLACE TRIGGER TRG_TBgrupo
AFTER INSERT OR UPDATE OR DELETE ON TBgrupo
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_grupo VALUES(NULL,'Grupo','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_grupo VALUES(NULL,'Grupo','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_grupo VALUES(NULL,'Grupo','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_horario(
idHorario NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idHorario PRIMARY KEY(idHorario));

CREATE OR REPLACE TRIGGER TRG_TBhorario
AFTER INSERT OR UPDATE OR DELETE ON TBhorario
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_horario VALUES(NULL,'Horario','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_horario VALUES(NULL,'Horario','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_horario VALUES(NULL,'Horario','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_materia(
idMateria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idMateria PRIMARY KEY(idMateria));

CREATE OR REPLACE TRIGGER TRG_TBmateria
AFTER INSERT OR UPDATE OR DELETE ON TBmateria
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_materia VALUES(NULL,'Materia','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_materia VALUES(NULL,'Materia','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_materia VALUES(NULL,'Materia','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_profesor(
idProfesor NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idProfesor PRIMARY KEY(idProfesor));

CREATE OR REPLACE TRIGGER TRG_TBprofesor
AFTER INSERT OR UPDATE OR DELETE ON TBprofesor
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_profesor VALUES(NULL,'Profesor','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_profesor VALUES(NULL,'Profesor','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_profesor VALUES(NULL,'Profesor','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_profesoresPorGrupo(
idProfesoresPorGrupo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idProfesoresPorGrupo PRIMARY KEY(idProfesoresPorGrupo));

CREATE OR REPLACE TRIGGER TRG_TBprofesoresPorGrupo
AFTER INSERT OR UPDATE OR DELETE ON TBprofesoresPorGrupo
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_profesoresPorGrupo VALUES(NULL,'Profesores Por Grupo','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_profesoresPorGrupo VALUES(NULL,'Profesores Por Grupo','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_profesoresPorGrupo VALUES(NULL,'Profesores Por Grupo','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_relacion(
idRelacion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idRelacion PRIMARY KEY(idRelacion));

CREATE OR REPLACE TRIGGER TRG_TBrelacion
AFTER INSERT OR UPDATE OR DELETE ON TBrelacion
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_relacion VALUES(NULL,'Relación','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_relacion VALUES(NULL,'Relación','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_relacion VALUES(NULL,'Relación','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;

CREATE TABLE AUDITORIAS_sexo(
idSexo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
tabla VARCHAR2(25) NOT NULL,
accion VARCHAR2(15) NOT NULL,
usuario VARCHAR2(35),
fecha DATE NOT NULL,
CONSTRAINT pk_idSexo PRIMARY KEY(idSexo));

CREATE OR REPLACE TRIGGER TRG_TBsexo
AFTER INSERT OR UPDATE OR DELETE ON TBsexo
DECLARE
VAR_USUARIO VARCHAR2(25);
BEGIN
SELECT USER INTO VAR_USUARIO FROM DUAL;
IF INSERTING THEN
INSERT INTO AUDITORIAS_sexo VALUES(NULL,'Sexo','INSERT',VAR_USUARIO,SYSDATE); 
ELSIF UPDATING THEN
INSERT INTO AUDITORIAS_sexo VALUES(NULL,'Sexo','UPDATE',VAR_USUARIO,SYSDATE); 
ELSIF DELETING THEN
INSERT INTO AUDITORIAS_sexo VALUES(NULL,'Sexo','DELETE',VAR_USUARIO,SYSDATE); 
ELSE
DBMS_OUTPUT.PUT_LINE('Lo sentimos, comando no identificado.');
END IF;
END;
